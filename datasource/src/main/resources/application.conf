# AKKA configuration:
akka {
  # for debugging Akka config
  log-config-on-start = off

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Options: ERROR, WARNING, INFO, DEBUG
  # stdout-loglevel = "OFF"
  loglevel = ERROR

  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
  }

  log-dead-letters = off
  log-dead-letters-during-shutdown = off
}

development {
  bind-address = "localhost"
  port = 7895

  doobie {
    postgres {
      patient {
        driver="org.postgresql.Driver"
        url="jdbc:postgresql://localhost:5432/eventstore"
        user="streamer"
        password="streamer"
        schema="hl7"
      }
    },
    mssql {
      execution_log {
        driver="com.microsoft.sqlserver.jdbc.SQLServerDriver"
        url="jdbc:sqlserver://localhost:1433;DatabaseName=dwh$production"
        user="admin"
        password="12345678"
        schema="dwh"
      }
    }
    oracle {
      specimen {
        driver="oracle.jdbc.OracleDriver"
        url="jdbc:oracle:thin:@localhost:1521/XE"
        user="SYSTEM"
        password="ORACLE"
        schema="HR"
      }
    }
  }

  alpakka {
    mongodb {
      hl7 {
        url="mongodb://localhost:27017"
        database="dump"
        collection="hl7"
      }
    }
  }

  cassandra {
    keyspace=dwh
    preparedStatementCacheSize=1000
    maxConnectionsPerHost.REMOTE=2000
    maxConnectionsPerHost.LOCAL=32768
    session {
      contactPoints=["127.0.0.1"]
      port=9042
      queryOptions.fetchSize=1
      queryOptions.consistencyLevel=ONE
      withoutMetrics=true
      withoutJMXReporting=false
      credentials.0=cassandra
      credentials.1=cassandra
      maxSchemaAgreementWaitSeconds=1
      addressTranslator=com.datastax.driver.core.policies.IdentityTranslator
    }
    core {
      ConnectionsPerHost.REMOTE=3
      ConnectionsPerHost.LOCAL=4
    }
  }

  redis {
    server: "localhost"
    port: 6379
  }
}
